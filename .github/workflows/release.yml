name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            arch: amd64
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            arch: arm64
            goos: linux
            goarch: arm64
          # macOS builds
          - os: macos-latest
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: macos-latest
            arch: arm64
            goos: darwin
            goarch: arm64
          # Windows builds
          - os: windows-latest
            arch: amd64
            goos: windows
            goarch: amd64
          - os: windows-latest
            arch: arm64
            goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for version generation

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.1'

    - name: Download wintun.dll (Windows only)
      if: matrix.goos == 'windows'
      shell: bash
      run: |
        # Download wintun-0.14.1.zip
        curl -L -o wintun.zip https://www.wintun.net/builds/wintun-0.14.1.zip
        
        # Extract wintun.dll for the target architecture
        if [ "${{ matrix.goarch }}" = "amd64" ]; then
          unzip -j wintun.zip "wintun/bin/amd64/wintun.dll" -d .
        elif [ "${{ matrix.goarch }}" = "arm64" ]; then
          unzip -j wintun.zip "wintun/bin/arm64/wintun.dll" -d .
        elif [ "${{ matrix.goarch }}" = "386" ]; then
          unzip -j wintun.zip "wintun/bin/x86/wintun.dll" -d .
        elif [ "${{ matrix.goarch }}" = "arm" ]; then
          unzip -j wintun.zip "wintun/bin/arm/wintun.dll" -d .
        fi
        
        # Verify wintun.dll was extracted
        if [ -f "wintun.dll" ]; then
          echo "✅ wintun.dll downloaded successfully for ${{ matrix.goarch }}"
          ls -la wintun.dll
        else
          echo "❌ Failed to download wintun.dll for ${{ matrix.goarch }}"
          exit 1
        fi

    - name: Generate version
      shell: bash
      run: |
        # Generate version.go for the main project
        export GIT_CEILING_DIRECTORIES="$(realpath .)" && \
        tag="$(git describe --dirty 2>/dev/null)" && \
        ver="$(printf 'package main\n\nconst Version = "%s"\n' "$tag")" && \
        echo "$ver" > version.go

    - name: Build wireguard-go
      shell: bash
      run: |
        # Build the main wireguard-go binary
        if [ "${{ matrix.goos }}" = "windows" ]; then
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -ldflags="-s -w" -o wireguard-go-${{ matrix.goos }}-${{ matrix.goarch }}.exe
        else
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -ldflags="-s -w" -o wireguard-go-${{ matrix.goos }}-${{ matrix.goarch }}
        fi

    - name: Build wg-go
      shell: bash
      run: |
        # Build the wg-go binary from cmd/wg-go directory
        cd cmd/wg-go
        if [ "${{ matrix.goos }}" = "windows" ]; then
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -ldflags="-s -w" -o wg-go-${{ matrix.goos }}-${{ matrix.goarch }}.exe
        else
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -ldflags="-s -w" -o wg-go-${{ matrix.goos }}-${{ matrix.goarch }}
        fi

    - name: Create release directory
      shell: bash
      run: |
        mkdir -p release
        if [ "${{ matrix.goos }}" = "windows" ]; then
          mv wireguard-go-${{ matrix.goos }}-${{ matrix.goarch }}.exe release/
          mv cmd/wg-go/wg-go-${{ matrix.goos }}-${{ matrix.goarch }}.exe release/
        else
          mv wireguard-go-${{ matrix.goos }}-${{ matrix.goarch }} release/
          mv cmd/wg-go/wg-go-${{ matrix.goos }}-${{ matrix.goarch }} release/
        fi
        
        # Copy wintun.dll for Windows builds
        if [ "${{ matrix.goos }}" = "windows" ]; then
          if [ -f "wintun.dll" ]; then
            cp wintun.dll release/
            echo "✅ wintun.dll copied to release directory"
          else
            echo "❌ wintun.dll not found for Windows build"
            exit 1
          fi
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: release/
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release assets
      shell: bash
      run: |
        mkdir -p release-assets
        
        # Organize binaries by platform and architecture
        for artifact in artifacts/binaries-*; do
          if [ -d "$artifact" ]; then
            platform_arch=$(basename "$artifact" | sed 's/binaries-//')
            mkdir -p "release-assets/$platform_arch"
            
            # Copy wireguard-go binary
            if [[ "$platform_arch" == windows-* ]]; then
              if [ -f "$artifact/wireguard-go-$platform_arch.exe" ]; then
                cp "$artifact/wireguard-go-$platform_arch.exe" "release-assets/$platform_arch/wireguard-go.exe"
              fi
            else
              if [ -f "$artifact/wireguard-go-$platform_arch" ]; then
                cp "$artifact/wireguard-go-$platform_arch" "release-assets/$platform_arch/wireguard-go"
                chmod +x "release-assets/$platform_arch/wireguard-go"
              fi
            fi
            
            # Copy wg-go binary
            if [[ "$platform_arch" == windows-* ]]; then
              if [ -f "$artifact/wg-go-$platform_arch.exe" ]; then
                cp "$artifact/wg-go-$platform_arch.exe" "release-assets/$platform_arch/wg-go.exe"
              fi
            else
              if [ -f "$artifact/wg-go-$platform_arch" ]; then
                cp "$artifact/wg-go-$platform_arch" "release-assets/$platform_arch/wg-go"
                chmod +x "release-assets/$platform_arch/wg-go"
              fi
            fi
            
            # Copy wintun.dll for Windows builds
            if [ -f "$artifact/wintun.dll" ] && [[ "$platform_arch" == windows-* ]]; then
              cp "$artifact/wintun.dll" "release-assets/$platform_arch/wintun.dll"
            fi
            
            # Copy platform-specific scripts
            if [[ "$platform_arch" == windows-* ]]; then
              # Windows scripts
              if [ -f "start.bat" ]; then
                cp "start.bat" "release-assets/$platform_arch/"
              fi
              if [ -f "restart.bat" ]; then
                cp "restart.bat" "release-assets/$platform_arch/"
              fi
              if [ -f "stop.bat" ]; then
                cp "stop.bat" "release-assets/$platform_arch/"
              fi
            else
              # Linux/macOS scripts
              if [ -f "start.sh" ]; then
                cp "start.sh" "release-assets/$platform_arch/"
                chmod +x "release-assets/$platform_arch/start.sh"
              fi
              if [ -f "restart.sh" ]; then
                cp "restart.sh" "release-assets/$platform_arch/"
                chmod +x "release-assets/$platform_arch/restart.sh"
              fi
              if [ -f "stop.sh" ]; then
                cp "stop.sh" "release-assets/$platform_arch/"
                chmod +x "release-assets/$platform_arch/stop.sh"
              fi
            fi
            
            # Copy common files
            if [ -f "wg0.conf" ]; then
              cp "wg0.conf" "release-assets/$platform_arch/"
            fi
            if [ -f "README.md" ]; then
              cp "README.md" "release-assets/$platform_arch/"
            fi
            if [ -f "wg0.conf.example" ]; then
              cp "wg0.conf.example" "release-assets/$platform_arch/"
            fi
          fi
        done
        
        # Create compressed archives for each platform
        cd release-assets
        for platform_arch in */; do
          platform_arch=${platform_arch%/}
          tar -czf "../wireguard-go-$platform_arch.tar.gz" -C "$platform_arch" .
          zip -r "../wireguard-go-$platform_arch.zip" "$platform_arch"
        done
        cd ..

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## WireGuard Go Release ${{ github.ref_name }}
          
          This release contains pre-built binaries for:
          - **Linux**: amd64, arm64
          - **macOS**: amd64, arm64
          - **Windows**: amd64, arm64 (includes wintun.dll)
          
          ### Files included:
          - `wireguard-go` / `wireguard-go.exe`: Userspace WireGuard daemon
          - `wg-go` / `wg-go.exe`: WireGuard configuration management tool
          - `wintun.dll`: Windows TUN driver (Windows only)
          - `start.sh` / `start.bat`: Quick start script
          - `restart.sh` / `restart.bat`: Restart script
          - `stop.sh` / `stop.bat`: Stop script
          - `README.md`: Project documentation
          - `wg0.conf.example`: Example configuration file
          
          ### Quick Start:
          
          **Linux/macOS:**
          ```bash
          # Extract and run
          tar -xzf wireguard-go-linux-amd64.tar.gz
          cd wireguard-go-linux-amd64

          # Edit wg0.conf
          nano wg0.conf
          
          # Quick start (recommended)
          sudo ./start.sh
          
          # Management scripts
          sudo ./restart.sh  # Restart WireGuard
          sudo ./stop.sh     # Stop WireGuard
          
          # Or manual start
          sudo ./wireguard-go wg0
          ./wg-go show
          ```
          
          **Windows:**
          ```cmd
          # Extract and run (as Administrator)
          # Extract wireguard-go-windows-amd64.zip
          cd wireguard-go-windows-amd64

          # Edit wg0.conf
          notepad wg0.conf
          
          # Quick start (recommended)
          start.bat
          
          # Management scripts
          restart.bat  # Restart WireGuard
          stop.bat     # Stop WireGuard
          
          # Or manual start
          wireguard-go.exe wg0
          wg-go.exe show
          ```
          
          **Note:** Windows builds include `wintun.dll` which is required for TUN interface functionality.
        files: |
          wireguard-go-*.tar.gz
          wireguard-go-*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
