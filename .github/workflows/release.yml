name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            arch: amd64
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            arch: arm64
            goos: linux
            goarch: arm64
          # macOS builds
          - os: macos-latest
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: macos-latest
            arch: arm64
            goos: darwin
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for version generation

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.1'

    - name: Generate version
      run: |
        # Generate version.go for the main project
        export GIT_CEILING_DIRECTORIES="$(realpath .)" && \
        tag="$(git describe --dirty 2>/dev/null)" && \
        ver="$(printf 'package main\n\nconst Version = "%s"\n' "$tag")" && \
        echo "$ver" > version.go

    - name: Build wireguard-go
      run: |
        # Build the main wireguard-go binary
        CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -ldflags="-s -w" -o wireguard-go-${{ matrix.goos }}-${{ matrix.goarch }}

    - name: Build wg-go
      run: |
        # Build the wg-go binary from cmd/wg-go directory
        cd cmd/wg-go
        CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -ldflags="-s -w" -o wg-go-${{ matrix.goos }}-${{ matrix.goarch }}

    - name: Create release directory
      run: |
        mkdir -p release
        mv wireguard-go-${{ matrix.goos }}-${{ matrix.goarch }} release/
        mv cmd/wg-go/wg-go-${{ matrix.goos }}-${{ matrix.goarch }} release/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: release/
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Organize binaries by platform and architecture
        for artifact in artifacts/binaries-*; do
          if [ -d "$artifact" ]; then
            platform_arch=$(basename "$artifact" | sed 's/binaries-//')
            mkdir -p "release-assets/$platform_arch"
            
            # Copy wireguard-go binary
            if [ -f "$artifact/wireguard-go-$platform_arch" ]; then
              cp "$artifact/wireguard-go-$platform_arch" "release-assets/$platform_arch/wireguard-go"
              chmod +x "release-assets/$platform_arch/wireguard-go"
            fi
            
            # Copy wg-go binary
            if [ -f "$artifact/wg-go-$platform_arch" ]; then
              cp "$artifact/wg-go-$platform_arch" "release-assets/$platform_arch/wg-go"
              chmod +x "release-assets/$platform_arch/wg-go"
            fi
          fi
        done
        
        # Create compressed archives for each platform
        cd release-assets
        for platform_arch in */; do
          platform_arch=${platform_arch%/}
          tar -czf "../wireguard-go-$platform_arch.tar.gz" -C "$platform_arch" .
          zip -r "../wireguard-go-$platform_arch.zip" "$platform_arch"
        done
        cd ..

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## WireGuard Go Release ${{ github.ref_name }}
          
          This release contains pre-built binaries for:
          - **Linux**: amd64, arm64
          - **macOS**: amd64, arm64
          
          ### Binaries included:
          - `wireguard-go`: Userspace WireGuard daemon
          - `wg-go`: WireGuard configuration management tool
          
          ### Installation:
          1. Download the appropriate archive for your platform
          2. Extract the archive
          3. Move the binaries to your PATH (e.g., `/usr/local/bin/`)
          
          ### Usage:
          ```bash
          # Start WireGuard daemon
          ./wireguard-go wg0
          
          # Manage WireGuard configuration
          ./wg-go show
          ./wg-go genkey
          ```
        files: |
          wireguard-go-*.tar.gz
          wireguard-go-*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
